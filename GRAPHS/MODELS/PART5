import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np

# Define a simple neural network model
class NeuralNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)
        
    def forward(self, x):
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        return x

# Define the number of input features, hidden units, and output dimensions
input_size = len(paramConfig)  # Number of input parameters
hidden_size = 64  # Number of hidden units (you can adjust this)
output_size = input_size  # Number of output dimensions (same as input for this case)

# Create an instance of the neural network
model = NeuralNetwork(input_size, hidden_size, output_size)

# Define a loss function (mean squared error) and an optimizer (e.g., Adam)
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)  # Adjust the learning rate as needed

# Generate random data (replace this with your actual data)
num_samples = 1000
X_train = torch.rand((num_samples, input_size))  # Random input data
Y_train = torch.rand((num_samples, output_size))  # Random output data

# Training loop
num_epochs = 1000  # Adjust the number of epochs as needed
for epoch in range(num_epochs):
    # Forward pass
    outputs = model(X_train)
    
    # Compute the loss
    loss = criterion(outputs, Y_train)
    
    # Backpropagation and optimization
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    if (epoch + 1) % 100 == 0:
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}')

# Evaluate the model and get predictions
X_test = torch.rand((1, input_size))  # Replace this with your actual input data
with torch.no_grad():
    predictions = model(X_test)

# Convert predictions to a dictionary
next_param_dict = {param: value.item() for param, value in zip(paramConfig.keys(), predictions[0])}

print(next_param_dict)
